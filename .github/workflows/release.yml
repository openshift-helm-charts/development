name: Release-Workflow

on:
  pull_request_target:
    types: [opened, synchronize, reopened, edited, ready_for_review, labeled]

jobs:
  chart-workflow-release:
    name: Chart Workflow Release
    runs-on: ubuntu-20.04
    env:
      REPOSITORY_ORGANIZATION: mmulholla
    if: |
      github.event.pull_request.draft == false
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.BOT_TOKEN }}
          path: "pr-branch"

      - name: Set up Python 3.x Part 1
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Set up Python scripts in pr-branch
        working-directory: ./pr-branch
        run: |
          # set up python scripts
          echo "set up python script in $PWD"
          python3 -m venv ve1
          cd scripts && ../ve1/bin/pip3 install -r requirements.txt && cd ..
          cd scripts && ../ve1/bin/python3 setup.py install && cd ..

      - name: Check if only release file in PR and if user is authorized
        id: check_only_version_in_PR_and_authorized
        working-directory: ./pr-branch
        run: |
          # check if release file only is included in PR and if so that user is authorized.
          ./ve1/bin/release-checker --api-url=${{ github.event.pull_request._links.self.href }} \
                                  --sender=${{ github.event.sender.login }}

      - name: Check if PR created as part of release process
        id: check_created_release_pr
        working-directory: ./pr-branch
        if: ${{ steps.check_only_version_in_PR_and_authorized.outputs.PR_includes_release_only != 'true' }}
        env:
          BOT_NAME: ${{ secrets.BOT_NAME }}
        run: |
          # check if PR was created as part of release processing
          ./ve1/bin/release-checker --api-url=${{ github.event.pull_request._links.self.href }} \
                                  --sender='${{ github.event.sender.login }}' \
                                  --pr_branch='${{ github.event.pull_request.head.ref }}' \
                                  --pr_body='${{ github.event.pull_request.body }}'

      - name: Reflect on PR Content
        id: reflect_on_pr_content
        run: |
          # Determine if and how processing should continue
          if [ "${{ steps.check_created_release_pr.outputs.dev_release_branch }}" = 'true' ]; then
             echo "PR created by release processing"
             echo '::set-output name=merge::true'
             echo '::set-output name=release::true'
          elif [ "${{ steps.check_only_version_in_PR_and_authorized.outputs.PR_includes_release_only }}" = 'true' ]; then
             echo "PR contains only release_info file"
             echo '::set-output name=create_pull_requests::true'
          elif [ "${{ steps.check_only_version_in_PR_and_authorized.outputs.sender_not_authorized }}" = 'true' ]; then
             echo "Unauthorized Request"
             exit 1
          else
             echo "No release work to do"
             exit
          fi

      - name: Checkout charts repo
        if: ${{ steps.reflect_on_pr_content.outputs.create_pull_requests == 'true' }}
        uses: actions/checkout@v2
        with:
          repository: ${{ env.REPOSITORY_ORGANIZATION }}/charts
          token: ${{ secrets.BOT_TOKEN }}
          path: "charts-repo"

      - name: Checkout development repo
        if: ${{ steps.reflect_on_pr_content.outputs.create_pull_requests == 'true' }}
        uses: actions/checkout@v2
        with:
          repository: ${{ env.REPOSITORY_ORGANIZATION }}/development
          token: ${{ secrets.BOT_TOKEN }}
          path: "dev-repo"

      - name: Set up Python 3.x Part 1
        if: ${{ steps.reflect_on_pr_content.outputs.create_pull_requests == 'true' }}
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Set up Python scripts on main branch
        run: |
          # set up python scripts
          echo "set up python script in $PWD"
          python3 -m venv ve1
          cd scripts && ../ve1/bin/pip3 install -r requirements.txt && cd ..
          cd scripts && ../ve1/bin/python3 setup.py install && cd ..

      - name: Check if version updated
        id: check_version_updated
        if: ${{ steps.reflect_on_pr_content.outputs.create_pull_requests == 'true' }}
        run: |
          # check if version file was changed
          ./ve1/bin/release-checker --version=${{ steps.check_only_version_in_PR_and_authorized.outputs.PR_version }}

      - name: Check Values 1
        run: |
          echo "steps.relflect_progress.outputs.merge: ${{ steps.relflect_progress.outputs.merge }}"
          echo "steps.reflect_on_pr_content.outputs.merge:  ${{ steps.reflect_on_pr_content.outputs.merge }}"
          echo "steps.check_version_updated.outputs.release_updated: ${{ steps.check_version_updated.outputs.release_updated }}"
          echo "steps.reflect_on_pr_content.outputs.create_pull_requests: ${{ steps.reflect_on_pr_content.outputs.create_pull_requests }}"
          echo "steps.reflect_progress.outputs.release:  ${{ steps.reflect_progress.outputs.release }}"
          echo "steps.reflect_on_pr_content.outputs.release:  ${{ steps.reflect_on_pr_content.outputs.release }}"
          echo "steps.check_only_version_in_PR_and_authorized.outputs.PR_version: ${{ steps.check_only_version_in_PR_and_authorized.outputs.PR_version }}"

      - name: Sync the repositories
        id: sync_repositories
        if: ${{ steps.check_version_updated.outputs.release_updated == 'true' }}
        env:
          BOT_NAME: ${{ secrets.BOT_NAME }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          PR_BODY: ${{ steps.check_version_in_PR.outputs.PR_release_body }}
        run: |
          # sync the repositories
          ./ve1/bin/releaser --version=${{ steps.check_only_version_in_PR_and_authorized.outputs.PR_version }} --pr_dir="./pr-branch" --development_dir="./dev-repo" --charts_dir="./charts-repo"

      - name: reflect on release creation progress
        id: reflect_progress
        if: ${{ steps.check_version_updated.outputs.release_updated == 'true' }}
        run: |
          # determine what should be done next
          if [ "${{ steps.sync_repositories.outputs.charts_pr_error }}" = 'true' ] || [ "${{ steps.sync_repositories.outputs.dev_pr_error }}" = 'true' ]; then
              echo "Errors creating pull requests"
              exit 1
          fi
          if [ "${{ steps.sync_repositories.outputs.charts_pr_created }}" = 'true' ] || [ "${{ steps.sync_repositories.outputs.charts_pr_created }}" = 'true' ]; then
              echo "At least one PR was created - just merge this one"
              echo '::set-output name=merge::true'
          fi
          if [ "${{ steps.sync_repositories.outputs.dev_pr_not_needed }}" = 'true' ]; then
              echo "No dev PR so create release"
              echo '::set-output name=release::true'
          fi

      - name: Check Values 2
        run: |
          echo "steps.reflect_progress.outputs.merge: ${{ steps.reflect_progress.outputs.merge }}"
          echo "steps.reflect_on_pr_content.outputs.merge:  ${{ steps.reflect_on_pr_content.outputs.merge }}"
          echo "steps.check_version_updated.outputs.release_updated: ${{ steps.check_version_updated.outputs.release_updated }}"
          echo "steps.reflect_on_pr_content.outputs.create_pull_requests: ${{ steps.reflect_on_pr_content.outputs.create_pull_requests }}"
          echo "steps.reflect_progress.outputs.release:  ${{ steps.reflect_progress.outputs.release }}"
          echo "steps.reflect_on_pr_content.outputs.release:  ${{ steps.reflect_on_pr_content.outputs.release }}"
          echo "steps.check_only_version_in_PR_and_authorized.outputs.PR_version: ${{ steps.check_only_version_in_PR_and_authorized.outputs.PR_version }}"

      - name: Approve PR
        id: approve_pr
        if: ${{ steps.relflect_progress.outputs.merge == 'true' || steps.reflect_on_pr_content.outputs.merge == 'true' }}
        uses: hmarr/auto-approve-action@v2
        with:
          github-token:  ${{ secrets.GITHUB_TOKEN }}

      - name: Merge PR
        id: merge_pr
        if: ${{ steps.reflect_progress.outputs.merge == 'true' || steps.reflect_on_pr_content.outputs.merge == 'true' }}
        uses: pascalgn/automerge-action@v0.13.1
        env:
          GITHUB_TOKEN:  ${{ secrets.GITHUB_TOKEN }}
          MERGE_METHOD: squash
          MERGE_LABELS: ""

      - name: Check for PR merge
        if: ${{ steps.reflect_progress.outputs.merge == 'true' || steps.reflect_on_pr_content.outputs.merge == 'true' }}
        run: |
          ./ve1/bin/check-auto-merge --api-url=${{ github.event.pull_request._links.self.href }}

      - name: Create the the release
        id: create_release
        if: ${{ steps.reflect_progress.outputs.release == 'true' || steps.reflect_on_pr_content.outputs.release == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.check_only_version_in_PR_and_authorized.outputs.PR_version }}
          body: ${{ steps.check_only_version_in_PR_and_authorized.outputs.PR_release_body }}
        env:
          GITHUB_TOKEN:  ${{ secrets.GITHUB_TOKEN }}
